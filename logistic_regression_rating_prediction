##Install and load the requires packages
#Step 1  Loading required packages
library(tidyverse)
library(ggplot2)
library(caret)
library(caretEnsemble)
library(psych)
library(Amelia)
library(mice)
library(GGally)
library(rpart)
library(randomForest)
library (missForest)
library(VIM)
library(klaR)
library(e1071)
library(caTools)
library(MASS)
library(caret)
library(dplyr)
library(knitr)
library(lattice)
library(reshape2)

##Import the data set
#STep 2 : Reading data into R
data<- read.csv("C:/Users/norazyrabinti.omar/Documents/R Project/DS Project/Prediction/rating_pred.csv")

#Setting outcome variables as categorical
data$rating <- factor(data$rating, levels = c(0,1), labels = c("0", "1"))
data$rating

#Studying the Data Set
#Step 3 : Studying the structure of the data
str(data)
head(data)

#Step 4: Data Cleaning
colSums(is.na(data))


##mean imputation of multiple columns (i.e. the whole data frame) #####

for(i in 1:ncol(data)) {
  data[ , i][is.na(data[ , i])] <- mean(data[ , i], na.rm = TRUE)
}
colSums(is.na(data))

data<-data.frame(data)

# Convert all columns to factor
data <- as.data.frame(unclass(data),                     
                       stringsAsFactors = TRUE)

# Splitting dataset
split <- sample.split(data, SplitRatio = 0.7)
split

# Training model
train_reg <- subset(data, split == "TRUE")
test_reg <- subset(data, split == "FALSE")

# Model evaluation
logistic_model <- glm(rating ~.,family=binomial(link='logit'),data=train_reg)
logistic_model

# Summary
summary(logistic_model)

# Predict test data based on model
predict_reg <- predict(logistic_model, 
                       test_reg, type = "response")
predict_reg  

# Changing probabilities
predict_reg <- ifelse(predict_reg >0.5, 1, 0)

# Evaluating model accuracy
# using confusion matrix
cm_lr=table(predict_reg, test_reg$rating)
cm_lr

missing_classerr <- mean(predict_reg != test_reg$rating)
print(paste('Accuracy =', 1 - missing_classerr))

confusionMatrix(cm_lr)

false_negatives<-cm_lr[1,2]
false_negatives
false_positives<-cm_lr[2,1]
false_positives

true_negatives<-cm_lr[1,1]
true_negatives
true_positives<-cm_lr[2,2]
true_positives

specificity(cm_lr)
sensitivity(cm_lr)

accuracy <- (true_positives + true_negatives) / (true_positives + false_negatives + false_positives + true_negatives)
accuracy

recall <-true_positives/ (true_positives + false_negatives)
recall

precision <-true_positives/ (true_positives + false_positives)
precision

Fmeasure <- (2*precision*recall) / (precision + recall)
Fmeasure

